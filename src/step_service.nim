import os, osproc, strformat, strutils, times

const
  bootstrapScriptName = "bootstrap-step-ca.sh"
  defaultConfigPath = "/etc/step-ca"

let timestamp = now().format("yyyy-MM-dd HH:mm:ss")

# Adjust as needed
let stepCaPath = findExe("step-ca")
if stepCaPath.len == 0:
  stderr.writeLine("[ERR] 'step-ca' binary not found in PATH. Aborting.")
  quit(1)

# Check if ca-config directory exists
if not dirExists("./ca-config"):
  stderr.writeLine("[ERR] './ca-config' directory not found. Aborting.")
  quit(1)

let bootstrapScript = &"""
#!/bin/bash
# Generated by rezn-seedr on {timestamp}
set -euo pipefail

echo "[INFO] Creating step user..."
id -u step &>/dev/null || useradd --user-group --system --home {defaultConfigPath} --shell /bin/false step

echo "[INFO] Granting CAP_NET_BIND_SERVICE to step-ca..."
setcap CAP_NET_BIND_SERVICE=+eip "{stepCaPath}"

echo "[INFO] Preparing CA config directory..."
mkdir -p {defaultConfigPath}
cp -r ./ca-config/* {defaultConfigPath}/

echo "[INFO] Updating ownership..."
chown -R step:step {defaultConfigPath}

echo "[INFO] Creating systemd unit..."
cat > /etc/systemd/system/step-ca.service <<'EOF'
[Unit]
Description=step-ca service
Documentation=https://smallstep.com/docs/step-ca
Documentation=https://smallstep.com/docs/step-ca/certificate-authority-server-production
After=network-online.target
Wants=network-online.target
StartLimitIntervalSec=30
StartLimitBurst=3
ConditionFileNotEmpty=/etc/step-ca/config/ca.json
ConditionFileNotEmpty=/etc/step-ca/password.txt

[Service]
Type=simple
User=step
Group=step
Environment=STEPPATH=/etc/step-ca
WorkingDirectory=/etc/step-ca
ExecStart=/usr/bin/step-ca config/ca.json --password-file password.txt
ExecReload=/bin/kill --signal HUP $MAINPID
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitInterval=30
StartLimitBurst=3

# Process capabilities & privileges
AmbientCapabilities=CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
SecureBits=keep-caps
NoNewPrivileges=yes

# Sandboxing
ProtectSystem=full
ProtectHome=true
RestrictNamespaces=true
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
PrivateTmp=true
PrivateDevices=true
ProtectClock=true
ProtectControlGroups=true
ProtectKernelTunables=true
ProtectKernelLogs=true
ProtectKernelModules=true
LockPersonality=true
RestrictSUIDSGID=true
RemoveIPC=true
RestrictRealtime=true
SystemCallFilter=@system-service
SystemCallArchitectures=native
MemoryDenyWriteExecute=true
ReadWriteDirectories=/etc/step-ca/db

[Install]
WantedBy=multi-user.target
EOF

echo "[INFO] Reloading systemd daemon and enabling step-ca..."
systemctl daemon-reexec
systemctl daemon-reload
systemctl enable --now step-ca

echo "[SUCCESS] step-ca is up and running!"
"""

# Save the script to disk
try:
  writeFile(bootstrapScriptName, bootstrapScript)
  discard execShellCmd("chmod +x " & bootstrapScriptName)
  let hash = execProcess("sha256sum " & bootstrapScriptName).split()[0]
  echo &"""
[OK] Bootstrap script generated: ./{bootstrapScriptName}
     SHA256: {hash}
Run it with:

  sudo ./{bootstrapScriptName}
"""
except IOError as e:
  stderr.writeLine("[ERR] Failed to write bootstrap script: " & e.msg)
  quit(1)
